{"ast":null,"code":"import React from \"react\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stopwatch() {\n  // const [time, setTime] = useState(0);\n  // const [isRunning, setIsRunning] = useState(false);\n  // const intervalRef = useRef(null);\n  // const [laplist, setLaplist] = useState([]);\n\n  // function handleStart() {\n  //   setIsRunning(true);\n  //   intervalRef.current = setInterval(() => {\n  //     setTime((prevTime) => prevTime + 10);\n  //   }, 10);\n  // }\n\n  // function handlePause() {\n  //   clearInterval(intervalRef.current);\n  //   setIsRunning(false);\n  // }\n\n  // function handleReset() {\n  //   clearInterval(intervalRef.current);\n  //   setIsRunning(false);\n  //   setTime(0);\n  //   // setLaplist([]);\n  //   var list = document.getElementById(\"list\");\n  //   list.length = 0;\n  //   const len = list.children.length;\n  //   for (var i = 0; i < len; i++) {\n  //     list.removeChild(list.children[0]);\n  //   }\n  // }\n\n  // function handleLap() {\n  //   const milliseconds = `0${(time % 1000) / 10}`.slice(-2);\n  //   const seconds = `0${Math.floor(time / 1000) % 60}`.slice(-2);\n  //   const minutes = `0${Math.floor(time / 60000) % 60}`.slice(-2);\n  //   const hours = `0${Math.floor(time / 3600000)}`.slice(-2);\n  //   const laptime = hours + \":\" + minutes + \":\" + seconds + \":\" + milliseconds;\n  //   setLaplist((laptime) => [...laptime, time]);\n  //   const list = document.getElementById(\"list\");\n  //   let lapHistory = document.createElement(\"li\");\n  //   lapHistory.textContent = laptime;\n  //   list.appendChild(lapHistory);\n  // }\n\n  // const milliseconds = `0${(time % 1000) / 10}`.slice(-2);\n  // const seconds = `0${Math.floor(time / 1000) % 60}`.slice(-2);\n  // const minutes = `0${Math.floor(time / 60000) % 60}`.slice(-2);\n  // const hours = `0${Math.floor(time / 3600000)}`.slice(-2);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"a\"\n  }, void 0, false);\n}\n_c = Stopwatch;\nexport default Stopwatch;\nvar _c;\n$RefreshReg$(_c, \"Stopwatch\");","map":{"version":3,"names":["React","Fragment","_Fragment","jsxDEV","_jsxDEV","Stopwatch","children","_c","$RefreshReg$"],"sources":["/home/ryotaro_kubo/django_project/timerapp/src/components/timer.js"],"sourcesContent":["import React from \"react\";\n\nfunction Stopwatch() {\n  // const [time, setTime] = useState(0);\n  // const [isRunning, setIsRunning] = useState(false);\n  // const intervalRef = useRef(null);\n  // const [laplist, setLaplist] = useState([]);\n\n  // function handleStart() {\n  //   setIsRunning(true);\n  //   intervalRef.current = setInterval(() => {\n  //     setTime((prevTime) => prevTime + 10);\n  //   }, 10);\n  // }\n\n  // function handlePause() {\n  //   clearInterval(intervalRef.current);\n  //   setIsRunning(false);\n  // }\n\n  // function handleReset() {\n  //   clearInterval(intervalRef.current);\n  //   setIsRunning(false);\n  //   setTime(0);\n  //   // setLaplist([]);\n  //   var list = document.getElementById(\"list\");\n  //   list.length = 0;\n  //   const len = list.children.length;\n  //   for (var i = 0; i < len; i++) {\n  //     list.removeChild(list.children[0]);\n  //   }\n  // }\n\n  // function handleLap() {\n  //   const milliseconds = `0${(time % 1000) / 10}`.slice(-2);\n  //   const seconds = `0${Math.floor(time / 1000) % 60}`.slice(-2);\n  //   const minutes = `0${Math.floor(time / 60000) % 60}`.slice(-2);\n  //   const hours = `0${Math.floor(time / 3600000)}`.slice(-2);\n  //   const laptime = hours + \":\" + minutes + \":\" + seconds + \":\" + milliseconds;\n  //   setLaplist((laptime) => [...laptime, time]);\n  //   const list = document.getElementById(\"list\");\n  //   let lapHistory = document.createElement(\"li\");\n  //   lapHistory.textContent = laptime;\n  //   list.appendChild(lapHistory);\n  // }\n\n  // const milliseconds = `0${(time % 1000) / 10}`.slice(-2);\n  // const seconds = `0${Math.floor(time / 1000) % 60}`.slice(-2);\n  // const minutes = `0${Math.floor(time / 60000) % 60}`.slice(-2);\n  // const hours = `0${Math.floor(time / 3600000)}`.slice(-2);\n\n  return (\n    <>\n      a\n      {/* <div id=\"sw\">\n        <h1>Stopwatch</h1>\n        <p>\n          {hours}:{minutes}:{seconds}:{milliseconds}\n        </p>\n        {isRunning ? (\n          <button onClick={handlePause}>Pause</button>\n        ) : (\n          <button onClick={handleStart}>Start</button>\n        )}\n        <button onClick={handleLap}>lap</button>\n        <button onClick={handleReset}>Reset</button>\n      </div>\n      <ul id=\"list\"></ul>\n      <div>\n        <link rel=\"stylesheet\" href=\"\" />\n      </div> */}\n    </>\n  );\n}\n\nexport default Stopwatch;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAA,EAAG;EACnB;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACED,OAAA,CAAAF,SAAA;IAAAI,QAAA,EAAE;EAEA,gBAiBA,CAAC;AAEP;AAACC,EAAA,GAvEQF,SAAS;AAyElB,eAAeA,SAAS;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}